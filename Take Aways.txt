Module 3, video 3 (simple components)

Aca lo que esta pasando es que si prendes el profiler de React en el navegador, le das al boton de record y 
arrastras cualquiera de las cards, pasa que se renderiza el componente App y ademas todos sus children, incluido el 
boton de Add.
Lo que se hizo aca entonces fue cambiar la implementacion del AddButton para que en lugar de extender a React.Component
extienda a React.PureComponent.

"PureComponent is exactly the same as Component except that it handles the shouldComponentUpdate method for you. 
When props or state changes, PureComponent will do a shallow comparison on both props and state. 
Component on the other hand won't compare current props and state to next out of the box."

Basicamente, como en AddButton no cambio ninguna prop o state, lo cambiamos a PureComponent asi React hace una
comparacion y decide si hay que re renderizar o no.

El siguiente paso es probarlo, y veriamos que a pesar de esto el boton se sigue re renderizando junto con todos los
demas componentes.
El problema es que dentro del evento onClick, teniamos asignada una funcion (la que actualizaba el state isAddOpen),
y esa funcion se crea cada vez por lo que a pesar de que hagan lo mismo, dos instancias de esa funcion siguen siendo
diferentes, y por eso re renderiza.
Lo que hizo fue, usar useCallback, muy parecido a useEffect, agregando la llamada al hook ahi dentro y de esta manera
el boton ya no vuelve a re renderizarse!
Para comprobarlo hay que apretar el boton de record en el profiler, arrastrar una card, detener el record y ver como 
el componente AddButton aparece en gris.


Module 3, video 4 (function components)

First of all, we convert the AddButton from a class component to a function component.
Lo que hay que hacer es llamar a la function React.memo que como primer parametro recibe un functional component, y
ademas tiene la opcion de pasarle un segundo parametro tal cual hacemos en useCallback o useEffect. En este caso este
segundo parametro lo dejamos como esta.
Como la funcion onClick que le pasamos al AddButton en sus props es siempre la misma (porque estamos usando el 
useCallback en App.js) entonces AddButton no va a volver a renderizarse.


Module 3, video 5 (complex props)

Here, we will focus on the summary at the right top of the screen.
If I start the profiler and drag a card, the summary is re rendering even though any
of its data has updated.
The summary is a class component. Previously we worked with a Pure component, in that
case the references to its props are being compared to figure out if the component
needs to re-render.
Anyway, there is a more specific method when working with class components.
We will implement the shouldComponentUpdate, that returns a boolean. If true, then
the component re-render, if false it won't.

Ahora, no va a funcionar asi nomas.
Si doy doble click sobre una card, esta se borra pero el Summary no se esta updateando.
Esto es porque en el App.js estamos trabajando con un estado que no es immutable.
Entonces al borrar, cuando checkeo los lenght en el shouldComponentUpdate, siempre me
da que son iguales. 
Tenemos que crear nuevas instancias del state y no trabajar siempre con la misma.
The same principle has been applied at the addCard function.
La leccion a aprender aca es, que cuando estamos usando Pure components,
shouldComponentUpdate o React.memo, tenemos que siempre ser capaces de comparar objetos.
Por lo tanto tenemos que asegurarnos de que no estamos mutando data.

Cambiamos el Summary para que sea un function component y uso React.memo.
React.memo recibe una funcion y puede ademas recibir un segundo parametro que es lo que
vamos a usar para comparar si el estado esta cambiando o no.


Module 3, video 6 (working with repeated components)

Si movemos una de las cards, vamos a notar en el profiler que todas estan re renderizando...
Primero vamos a actualizar el card component para que sea un function component en lugar
de ser un class component.
Finalmente, como segundo parametro de React.memo, agregamos una funcion que compare
dos cards. Si tiene el mismo id, y la posicion con respecto a left y top son iguales,
entonces la card nunca cambio y no hay necesidad de re renderizar.


Module 3 - Final Summary

Cuando tenemos un class component, podemos usar PureComponent para hacer reference
checking in the props. Osea, que si el component recibe los mismos props, entonces no
va a renderizar.
Si tengo un class component pero quiero hacer un check mas especifico, entonces puedo
usar shouldComponentUpdate.
Si tengo un function component, puedo usar React.memo en donde puedo declarar una
funcion que va a determinar si el component tiene que re renderizar o no. Si retorna
true, el componente no necesita renderizar, si false, renderizar.


Module 4 - video 1